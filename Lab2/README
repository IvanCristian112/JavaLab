Homework 

Pentru ca o problema sa fie valida, avem conditiile: 
1. toate drumurile sa aiba lungimea >0
2. toate drumurile sa aiba locatiile diferite (firstLocation!=secondLocation pentru un obiect Road)
3. sa avem macar 2 locatii
Am implementat un algoritm de tip DFS cu lista de adiacenta. care determina daca putem ajunge de la o locatie la alta, care se opreste cand nodul curent este locatia 
de sfarsit.

Bonus
Am implementat un algoritm Dijkstra cu PriorityQueue. 
Analiza performantei: 
Pentru generarea problemei, am creat instante cu numar de locatii dat ca parametru. Nodul de start din algoritmul Dijkstra este primul nod generat, iaral doilea nod
este ales random. Pentru a crea un graf conectat am adaugat n*logn/2 muchii(daca cele doua noduri nu sunt conectate, nu putem aplica aplica algoritmul de gasire a 
drumului de cost minim); de exemplu, o problema cu 10_000 de locatii va avea aproximativ 42_000 de drumuri. In general, drumul gasit are o lungime mica (5-6 noduri). 
Timpul de rulare este dat in mare parte de generarea problemei, dupa cum se poate vedea din datele urmatoare: 

 Nr de obiecte Location       Running time (generate problem) (s)        Running time(generate problem + solve) (s)
        5000                            0.709                                         0.765
        6000                            1.098                                         1.281
        7000                            1.750                                         1.877
        8000                            2.694                                         3.097
        9000                            4.858                                         5.161
        10_000                          8.859                                         9.105


Nr de obiecte Location          Memorie folosita (MB)
        5000                         3.86
        6000                         4.31
        7000                         4.99  
        8000                         5.8 
        9000                         6.86
        10_000                       7.38 
